---

- name: Ensure Pip is installed.
  package:
    name: python3-pip
    state: present

- name: install pip docker
  pip:
    name: docker

# generate keys if they are not set
# TODO: is this OK? could this be done in a simpler way?
- name: generate default master key
  when: HEXAA_BACKEND_MASTERKEY.defaultMasterKey == ""
  shell: "tr -c -d '0123456789abcdefghijklmnopqrstuvwxyz' </dev/urandom | dd bs=40 count=1 2>/dev/null;echo"
  register: DEFAULT_KEY
- name: store default master key
  when: HEXAA_BACKEND_MASTERKEY.defaultMasterKey == ""
  set_fact:
      HEXAA_BACKEND_MASTERKEY: "{{ HEXAA_BACKEND_MASTERKEY | combine({'defaultMasterKey': DEFAULT_KEY.stdout}) }}"

- name: generate secret
  when: HEXAA_BACKEND_SECRET == ""
  shell: "tr -c -d '0123456789abcdefghijklmnopqrstuvwxyz' </dev/urandom | dd bs=32 count=1 2>/dev/null;echo"
  register: SECRET
- name: store secret
  when: HEXAA_BACKEND_SECRET == ""
  set_fact:
      HEXAA_BACKEND_SECRET: "{{ SECRET.stdout }}"

- name: create log dir
  file:
    path: "{{ HEXAA_HOST_DIR }}/logs/backend"
    state: directory
    mode: ugo+rwxt
  register: log_dir

- name: create config dir
  file:
    path: "{{HEXAA_HOST_DIR }}/config/backend"
    state: directory
  register: config_dir
  tags: [ssp]
- name: create site config dir
  file:
    path: "{{ config_dir.path }}/site"
    state: directory

- name: ensure ansible generated
  file:
    path: "{{ config_dir.path }}/00_GENERATED_BY_ANSIBLE"
    state: touch

- name: create parameters.yml from template
  template:
    src: parameters.yml.j2
    dest: "{{ config_dir.path }}/site/parameters.yml"
- name: create hexaa_admins.yml from template
  template:
    src: hexaa_admins.yml.j2
    dest: "{{ config_dir.path }}/site/hexaa_admins.yml"
- name: copy default entity ID config
  copy:
    src: files/hexaa_entityids_dist.yml
    dest: "{{ config_dir.path }}/site/hexaa_entityids.yml"
    # do not overwrite existing generated list:
    force: no

- name: set permissions for entity ID list file
  file:
    path: "{{ config_dir.path }}/site/hexaa_entityids.yml"
    # it must be writable by the user running the generator script in the
    # container
    mode: o+w

- name: copy nginx config
  tags: [web]
  copy:
    src: files/nginx.conf
    dest: "{{ config_dir.path }}/nginx.conf"

- name: create ssp config directory
  file:
    path: "{{ config_dir.path }}/ssp"
    state: directory
  tags: [ssp]
- name: create simplesamlphp-config from template
  template:
    src: simplesamlphp-config.php.j2
    dest: "{{ config_dir.path }}/ssp/config.php"
  tags: [ssp]
- name: create simplesamlphp-attributeauthority-hosted from template
  template:
    src: simplesamlphp-attributeauthority-hosted.php.j2
    dest: "{{ config_dir.path }}/ssp/attributeauthority-hosted.php"
  tags: [ssp]
- name: create module_aa config from template
  template:
    src: simplesamlphp-module_aa.php.j2
    dest: "{{ config_dir.path }}/ssp/module_aa.php"
  tags: [ssp]

- name: ensure saml-aa cert exists
  stat:
    path: "{{ SSP_CERT_PATH }}/aa.server.cert.pem"
  register: saml_aa_cert

- name: ensure saml-aa privkey exists
  stat:
    path: "{{ SSP_CERT_PATH }}/aa.server.key.pem"
  register: saml_aa_privkey

- name: debug saml-aa cert exists
  debug:
    msg: "There is no saml-aa cert at {{ SSP_CERT_PATH }}/aa.server.cert.pem"
  when: not saml_aa_cert.stat.exists

- name: debug saml-aa privkey exists
  debug:
    msg: "There is no saml-aa privkey at {{ SSP_CERT_PATH }}/aa.server.key.pem"
  when: not saml_aa_privkey.stat.exists

- name: fail saml-aa ssl
  fail:
    msg: "Fail saml-aa ssl configs see above"
  when:
    - not saml_aa_privkey.stat.exists or not saml_aa_cert.stat.exists
    - not HEXAA_GENERATE_SELFSIGNED

- name: Generate an private key for SSP
  openssl_privatekey:
    path: "{{ SSP_CERT_PATH }}/aa.server.key.pem"
  when:
    - HEXAA_GENERATE_SELFSIGNED
    - not saml_aa_privkey.stat.exists
- name: Generate an OpenSSL Certificate Signing Request
  openssl_csr:
    path:            "{{ SSP_CERT_PATH }}/csr.csr"
    privatekey_path: "{{ SSP_CERT_PATH }}/aa.server.key.pem"
    common_name:     "{{ HEXAA_BACKEND_URL_HOST }}"
  when:
    - HEXAA_GENERATE_SELFSIGNED
    - not saml_aa_cert.stat.exists
- name: Generate a Self Signed OpenSSL certificate
  openssl_certificate:
    path:            "{{ SSP_CERT_PATH }}/aa.server.cert.pem"
    privatekey_path: "{{ SSP_CERT_PATH }}/aa.server.key.pem"
    csr_path:        "{{ SSP_CERT_PATH }}/csr.csr"
    provider: selfsigned
  when:
    - HEXAA_GENERATE_SELFSIGNED
    - not saml_aa_cert.stat.exists

- name: create masterkey hook dir
  file:
    path: "{{ config_dir.path }}/hooks"
    state: directory
- name: copy masterkey hooks
  copy:
    src: "files/{{ HEXAA_BACKEND_HOOK_DIR }}/"
    dest: "{{ config_dir.path }}/hooks"
  when: HEXAA_BACKEND_HOOK_DIR != ""
